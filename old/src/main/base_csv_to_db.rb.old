require_relative '../util/yaml_util'

# a base class to save csv's to the db.
# class pulls 
# DELETE THIS CLASS... move it as a factory...
# probably not needed.
class BaseCsvToDb
  
  attr_accessor :base_dir, :db, :db_user, :db_password, :db_host, :db_adapter
  
  # init the class.
  # can take two params in addition to the yaml files.
  # 1. base_dir: if you have a lot of files, you can specify a directory
  #    that the files are in so you don't have to enter it every time.
  # 2. db: the mysql2 object. if you have an connection, you can just pass it the db object.  
  def initialize(params = {})
    params = {
              base_dir: nil,
              db: nil
             }.merge(params)
    @base_dir = params.fetch(:base_dir)
    @db = params.fetch(:db)
    
    self.init_yaml
    self.init_db
  end
  
  def init_yaml
    @db_filename = 'config/database.yml'
    
    # load the yaml file.
    @db_prefs = YamlUtil.read(@db_filename)
  end
  
  def init_db
    # load db params from yaml file.
    @db_user = @db_prefs['db_user']
    @db_password = @db_prefs['db_password']
    @db_host = @db_prefs['db_url']
    @database = @db_prefs['db_name']
    @db_adapter = @db_prefs['db_adapter']
    
    # connect to the db.
    self.connect
  end



  # main
  ############################################################################
  
  # saves to the db.
  def save_to_db(params = {})
    # import csv.
    puts "==========="
    puts params.to_s
    
    csv_params = {:filename => "/home/user/fleet.csv",
              :line_term_by => "\r\n",
              :col_names => ["@dummy", "name", "description"]}
                         
    fparams = {:csv_params => csv_params,
              :table_name => "fleet",
              :table_cols => ["name", "description"],
              :key_cols => ["name"]}
    
    result = @db.import_csv fparams
    
    return result
  end  
  
  
  
  # db connections
  ############################################################################
  
  # keep in mind that the you need to fill in db name and file name.
  # will try to take the params if possible. if not, take the instance params.
  #
  # takes these args.
  # - host        - url of the db.
  # - database    - database name
  # - user        - db user name
  # - password    - db password
  # - adapter     - sequel adapter name. it currently uses mysql2 as default.
  def connect(params = {})
    params = {host: nil,
              user: nil,
              password: nil,
              database: nil,
              adapter: nil
             }.merge(params)
    
    # if params are specified, override the instance variables.
    @db_host = params.fetch(:host) || @db_host
    @database = params.fetch(:database) || @database
    @db_user = params.fetch(:user)  || @db_user
    @db_password = params.fetch(:password) || @db_password
    @db_adapter = params.fetch(:adapter) || @db_adapter
    
    # load results of the || operation into the param hash.
    final_params = {adapter: @db_adapter,
                    host: @db_host,
                    user: @db_user,
                    password: @db_password,
                    database: @database}
    
    puts final_params
    
    @db = SequelHelper.new final_params
  end
  


  # test
  ############################################################################
  
  def hello
    return "hello"
  end
    
end